<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RecipeGram</title>
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
<header>
  <div class="container">
    <h1><a href="/" class="logo">RecipeGram</a></h1>
    <nav>
      <% if (locals.user) { %>
        <span>Welcome, <%= user.email %></span>
        <button id="addRecipeBtn" class="add-recipe-button"><i class="recipe-icon">+</i> Add Recipe</button>
        <a href="/logout" class="nav-link">Log out</a>
      <% } else { %>
        <a href="/login" class="nav-link">Log in</a>
        <a href="/register" class="nav-link">Register</a>
      <% } %>
    </nav>
  </div>
</header>

<main class="container">
  <%- body %>
</main>

<% if (locals.user) { %>
<!-- Add Recipe Modal -->
<div id="recipeModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Add New Recipe</h2>
    
    <form id="recipeForm" enctype="multipart/form-data">
      <div class="form-group">
        <label for="recipeImage">Recipe Image:</label>
        <input type="file" id="recipeImage" name="recipeImage" accept="image/*">
      </div>
      
      <div class="form-group">
        <label for="recipeTitle">Recipe Name:</label>
        <input type="text" id="recipeTitle" name="title" required>
      </div>
      
      <div class="form-group">
        <label for="recipeCategory">Category:</label>
        <select id="recipeCategory" name="categoryId" required>
          <option value="">Select a category</option>
          <!-- Categories will be loaded dynamically -->
        </select>
        <div class="add-category-container">
          <button type="button" id="showAddCategory">+ Add new category</button>
          <div id="addCategoryForm" style="display:none;">
            <input type="text" id="newCategoryName" placeholder="New category name">
            <button type="button" id="addNewCategory">Add</button>
          </div>
        </div>
      </div>
      
      <div class="form-group">
        <label for="recipeDescription">Recipe Information:</label>
        <textarea id="recipeDescription" name="description" required></textarea>
      </div>
      
      <div class="form-group">
        <label>Ingredients:</label>
        <div id="ingredientsContainer">
          <div class="ingredient-input">
            <input type="text" name="ingredientName" placeholder="Ingredient name" required>
            <input type="text" name="ingredientAmount" placeholder="Amount (e.g. 2 cups)" required>
          </div>
        </div>
        <button type="button" id="addIngredientBtn">+ Add Ingredient</button>
      </div>
      
      <div class="form-group">
        <button type="submit" id="saveRecipeBtn" class="btn btn-primary">Save Recipe</button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Modal functionality
    const modal = document.getElementById('recipeModal');
    const btn = document.getElementById('addRecipeBtn');
    const closeBtn = document.querySelector('.close');
    
    // Load categories when modal opens
    btn.onclick = function() {
      modal.style.display = 'block';
      loadCategories();
    };
    
    closeBtn.onclick = function() {
      modal.style.display = 'none';
    };
    
    window.onclick = function(event) {
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    };
    
    // Add ingredient button
    document.getElementById('addIngredientBtn').addEventListener('click', function() {
      const container = document.getElementById('ingredientsContainer');
      const div = document.createElement('div');
      div.className = 'ingredient-input';
      div.innerHTML = '<input type="text" name="ingredientName" placeholder="Ingredient name" required>' +
                      '<input type="text" name="ingredientAmount" placeholder="Amount (e.g. 2 cups)" required>' +
                      '<button type="button" class="remove-ingredient">âœ•</button>';
      container.appendChild(div);
      
      // Add remove functionality to the new remove button
      div.querySelector('.remove-ingredient').addEventListener('click', function() {
        container.removeChild(div);
      });
    });
    
    // Show/hide add category form
    document.getElementById('showAddCategory').addEventListener('click', function() {
      const form = document.getElementById('addCategoryForm');
      form.style.display = form.style.display === 'none' ? 'block' : 'none';
    });
    
    // Add new category
    document.getElementById('addNewCategory').addEventListener('click', function() {
      const newCategoryName = document.getElementById('newCategoryName').value.trim();
      if (newCategoryName) {
        fetch('/api/categories', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ name: newCategoryName })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Add the new category to the dropdown
            const select = document.getElementById('recipeCategory');
            const option = document.createElement('option');
            option.value = data.categoryId;
            option.textContent = newCategoryName;
            select.appendChild(option);
            select.value = data.categoryId;
            
            // Hide the form and clear the input
            document.getElementById('addCategoryForm').style.display = 'none';
            document.getElementById('newCategoryName').value = '';
          } else {
            alert('Failed to add category: ' + data.error);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while adding the category');
        });
      }
    });
    
    // Load categories
    function loadCategories() {
      const select = document.getElementById('recipeCategory');
      
      // Clear previous options except the first one
      while (select.options.length > 1) {
        select.remove(1);
      }
      
      fetch('/api/categories')
        .then(response => response.json())
        .then(data => {
          data.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = category.name;
            select.appendChild(option);
          });
        })
        .catch(error => {
          console.error('Error loading categories:', error);
        });
    }
    
    // Handle recipe form submission
    document.getElementById('recipeForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      
      // Process ingredients with amounts
      const ingredientInputs = document.querySelectorAll('input[name="ingredientName"]');
      const ingredientNames = Array.from(ingredientInputs)
        .map(input => input.value.trim());
      
      const ingredientAmounts = Array.from(document.querySelectorAll('input[name="ingredientAmount"]'))
        .map(input => input.value.trim());
      
      // Validate that no ingredient names are empty
      const emptyIngredients = ingredientNames.some(name => name === '');
      if (emptyIngredients) {
        alert('All ingredients must have a name');
        return;
      }
      
      // Create ingredients array with name and amount
      const ingredients = [];
      for (let i = 0; i < ingredientNames.length; i++) {
        ingredients.push({
          name: ingredientNames[i],
          amount: ingredientAmounts[i] || ''
        });
      }
      
      // Remove the original fields from FormData and add the new JSON
      formData.delete('ingredientName');
      formData.delete('ingredientAmount');
      formData.append('ingredients', JSON.stringify(ingredients));
      
      fetch('/api/recipes', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          modal.style.display = 'none';
          alert('Recipe added successfully!');
          location.reload(); // Reload to see the new recipe
        } else {
          alert('Failed to add recipe: ' + data.error);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while saving the recipe');
      });
    });
  });
</script>
<% } %>

<footer>
  <div class="container">
    <p>&copy; 2025 RecipeGram</p>
  </div>
</footer>
</body>
</html>